/*
 * grunt-imgs2file
 * https://github.com/cherchyk/grunt-imgs2file
 *
 * Copyright (c) 2017 Bohdan Cherchyk
 * Licensed under the MIT license.
 */

'use strict';



import * as fs from 'fs';
//import { WriteStream } from 'fs';

import * as _ from 'lodash';

interface ImgType {
	mime: string;
	ext: string;
}

const IMG_TYPES: Array<ImgType> = [
	{ ext: 'png', mime: 'image/png' },
	{ ext: 'jpg', mime: 'image/jpg' },
	{ ext: 'gif', mime: 'image/gif' }];
const PATH_SEP = '/';
//const ASSET_SEP = '|';

interface Options {
	separator: string;
	path_prefix: string;
}

interface FileInfo {
	mime: string;
	assetPath: string;
	filePath: string;
}
//http://stackoverflow.com/questions/8110294/nodejs-base64-image-encoding-decoding-not-quite-working
function recursivelyGetAllImages(dir: string, pathPrefix: string): Array<FileInfo> {
	var result: Array<FileInfo> = [];

	var res = fs.readdirSync(dir);
	_.each(res, (fName: string) => {

		var fPath = dir + PATH_SEP + fName;

		var stats = fs.statSync(fPath);

		if (stats.size == 0) {
			return;
		}

		if (stats.isFile()) {
			var imgType: ImgType = _.find(IMG_TYPES, (it: ImgType) => {
				return _.endsWith(fName.toLowerCase(), it.ext);
			});

			if (!imgType) {
				return;
			}

			result.push({
				mime: imgType.mime,
				filePath: fPath,
				assetPath: pathPrefix + fName
			});

			return;
		}

		if (stats.isDirectory()) {
			var dirResult: Array<FileInfo> = recursivelyGetAllImages(fPath, pathPrefix + fName + PATH_SEP);
			result = result.concat(dirResult);
			return;
		}
	});

	return result;
}



function doGruntJob(grunt: IGrunt) {

	// Please see the Grunt documentation for more information regarding task
	// creation: http://gruntjs.com/creating-tasks

	grunt.registerMultiTask('imgs2file', 'Collects image files in target folder and writes their content to destination file in Base64.', function () {

		grunt.log.warn('HELLO again.');


		grunt.log.warn('this.files:::');
		grunt.log.ok(JSON.stringify(this.files));

		// Merge task-specific and/or target-specific options with these defaults.
		var options: Options = this.options({
			separator: '|',
			path_prefix: 'assets/'
		});


		grunt.log.warn('options:::');
		grunt.log.ok(JSON.stringify(options));


		// Iterate over all specified file groups.
		this.files.forEach(function (f: any) {
			// Concat specified files.
			var src = f.src.filter(function (filepath: any) {
				// Warn on and remove invalid source files (if nonull was set).
				if (!grunt.file.exists(filepath)) {
					grunt.log.warn('Source file "' + filepath + '" not found.');
					return false;
				}
				else {
					return true;
				}
			})
				.map(function (filepath: any) {
					// Read file source.
					return grunt.file.read(filepath);
				})
				.join(grunt.util.normalizelf(options.separator));

			// Handle options.
			src += '.';

			// Write the destination file.
			grunt.file.write(f.dest, src);

			// Print a success message.
			grunt.log.writeln('File "' + f.dest + '" created.');
		});
	});

}

export = doGruntJob;
